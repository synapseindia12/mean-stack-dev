var mongoose = require('mongoose'),Schema = mongoose.Schema;var crypto = require('crypto');var UserSchema = new Schema({    name: String,    email: {        type: String,        unique: true    },    hashedPassword: String});/* Encrypt password using virtuals */UserSchema.virtual('password')  .set(function (password) {      this._password = password;      this.salt = this.makeSalt();      this.hashedPassword = this.encryptPassword(password);  })  .get(function () {      return this._password;  });  /** * Methods */UserSchema.methods = {    /**     * Authenticate - check if the passwords are the same     *     * @param {String} plainText     * @return {Boolean}     * @api public     */    authenticate: function (plainText) {        return this.encryptPassword(plainText) === this.hashedPassword;    },    /**     * Make salt     *     * @return {String}     * @api public     */    makeSalt: function () {        return crypto.randomBytes(16).toString('base64');    },    /**     * Encrypt password     *     * @param {String} password     * @return {String}     * @api public     */    encryptPassword: function (password) {        if (!password || !this.salt) return '';        var salt = new Buffer(this.salt, 'base64');        return crypto.pbkdf2Sync(password, salt, 10000, 64).toString('base64');    }};module.exports = mongoose.model('user', UserSchema);